## namespace
namespace: "{{instance_name}}-ocean-operator"

## market image version
image:
  repository: public.ecr.aws/acentrik/oceanprotocol/operator-service
  tag: 3.1.0
  ## Specify a imagePullPolicy
  pullPolicy: Always

## Set desired pod ReplicaSet
replica: 1

## PostgreSQL subchart configuration
postgresql:
  enabled: false

## Enable/Disable Kubernetes Secrets Store CSI Driver. Currently only support AWS provider.
## ref: https://secrets-store-csi-driver.sigs.k8s.io
## ref: https://github.com/aws/secrets-store-csi-driver-provider-aws
secretstore:
  enabled: true
  provider: aws

## Secret relevant values or keys, depends on secretstore flag
secret:
  postgres:
    db:
      objectName: /{{instance_name}}/acentrik/core/db/postgres/operator
      objectType: ssmparameter
      objectVersionLabel: "{{parameter_label}}"
    user:
      objectName: /{{instance_name}}/acentrik/core/db/postgres/operator/username
      objectType: ssmparameter
      objectVersionLabel: "{{parameter_label}}"
    password:
      objectName: /{{instance_name}}/acentrik/core/db/postgres/operator/password
      objectType: ssmparameter
      objectVersionLabel: "{{parameter_label}}"
    host:
      objectName: /{{instance_name}}/acentrik/core/db/postgres/host
      objectType: ssmparameter
      objectVersionLabel: "{{parameter_label}}"
    port:
      objectName: /{{instance_name}}/acentrik/core/db/postgres/port
      objectType: ssmparameter
      objectVersionLabel: "{{parameter_label}}"
    # Addded dummy values temporarily below to move past error as secret-providerclass is failing - 18-Aug-2023
  ipfs:
    apiKey : false
    apiClient : false

## ConfigMap and secret relevant values
config:
  operatorAddress: 0x7397AcbE29027642F6242b08F022835E9cFC2E6A
  algoPodTimeout: "3600"
  storageExpiry: "5184000"
  signatureRequired: "0"
  allowedProviders: ""
  defaultNamespace: "{{instance_name}}-ocean-compute"
  resource:
    inputVolumeSize: "1Gi"
    outputVolumeSize: "1Gi"
    adminLogsVolumeSize: "1Gi"
    requestsCpu: "200m"
    requestsMemory: "100Mi"
    limitsCpu: "1"
    limitsMemory: "500Mi"
  log:
    level: INFO

podAutoScaler:
  enabled: true
  resource:
    averageUtilization: "200"
  minReplicas: "1"
  maxReplicas: "4"

service:
  servicePort: 8050
  type: ClusterIP

## Ingress relevant values
ingress:
  enabled: false

  pathType: ImplementationSpecific # ImplementationSpecific vs Prefix

  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts:
    - name: operator-api.acentrik.io
      path: /

      ## Set this to true in order to enable TLS on the ingress record
      ## A side effect of this will be that the backend odoo service will be connected at port 443
      tls: false

      ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
      tlsSecret: operator-api-tls

  ## Set this to true in order to add the corresponding annotations for cert-manager
  certManager: false
  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  annotations:
    #  kubernetes.io/tls-acme: true
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    ## enable if using alb
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/scheme: internet-facing
    ## target-type: ip vs instance
    ## ip, conected service = ClusterIP
    ## instance, conected service = NodePort
    # alb.ingress.kubernetes.io/target-type: ip

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  # - name: operator-api-tls
  #  key: |
  #  certificate: |

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 10
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 10
  successThreshold: 1
## Configure pod resources
resources:
  limits:
    cpu: 500m
    memory: 1024Mi
  requests:
    cpu: 200m
    memory: 128Mi
